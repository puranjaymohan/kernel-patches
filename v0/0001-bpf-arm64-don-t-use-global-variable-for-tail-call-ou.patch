From 8b45b3f0a150b0c357f7cbe1e205fc0007f23186 Mon Sep 17 00:00:00 2001
From: Puranjay Mohan <puranjay12@gmail.com>
Date: Mon, 11 Sep 2023 16:44:17 +0000
Subject: [PATCH bpf-next 1/2] bpf, arm64: don't use global variable for tail
 call out offset

Currently, the JIT stores the offset used to exit the emitted tail call
code in a global variable. This is initialised only once when the first
bpf program is JITed. All subsequent BPF programs use the same value
when they are being JITed.

Fortunately the code emmitted for doing a tail call is similar for all
BPF programs and subprograms, therefore this never caused a problem.

Save this offset value in jit_ctx which is separate for each program.

Signed-off-by: Puranjay Mohan <puranjay12@gmail.com>
---
 arch/arm64/net/bpf_jit_comp.c | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/arch/arm64/net/bpf_jit_comp.c b/arch/arm64/net/bpf_jit_comp.c
index 7d4af64e3982..5ef4d2a9a8cb 100644
--- a/arch/arm64/net/bpf_jit_comp.c
+++ b/arch/arm64/net/bpf_jit_comp.c
@@ -78,6 +78,7 @@ struct jit_ctx {
 	__le32 *image;
 	u32 stack_size;
 	int fpb_offset;
+	int tc_out_offset;
 };
 
 struct bpf_plt {
@@ -375,7 +376,6 @@ static int build_prologue(struct jit_ctx *ctx, bool ebpf_from_cbpf)
 	return 0;
 }
 
-static int out_offset = -1; /* initialized on the first pass of build_body() */
 static int emit_bpf_tail_call(struct jit_ctx *ctx)
 {
 	/* bpf_tail_call(void *prog_ctx, struct bpf_array *array, u64 index) */
@@ -387,7 +387,7 @@ static int emit_bpf_tail_call(struct jit_ctx *ctx)
 	const u8 tcc = bpf2a64[TCALL_CNT];
 	const int idx0 = ctx->idx;
 #define cur_offset (ctx->idx - idx0)
-#define jmp_offset (out_offset - (cur_offset))
+#define jmp_offset (ctx->tc_out_offset - (cur_offset))
 	size_t off;
 
 	/* if (index >= array->map.max_entries)
@@ -430,11 +430,11 @@ static int emit_bpf_tail_call(struct jit_ctx *ctx)
 	emit(A64_BR(tmp), ctx);
 
 	/* out: */
-	if (out_offset == -1)
-		out_offset = cur_offset;
-	if (cur_offset != out_offset) {
+	if (ctx->tc_out_offset == -1)
+		ctx->tc_out_offset = cur_offset;
+	if (cur_offset != ctx->tc_out_offset) {
 		pr_err_once("tail_call out_offset = %d, expected %d!\n",
-			    cur_offset, out_offset);
+			    cur_offset, ctx->tc_out_offset);
 		return -1;
 	}
 	return 0;
@@ -1568,6 +1568,7 @@ struct bpf_prog *bpf_int_jit_compile(struct bpf_prog *prog)
 	}
 
 	ctx.fpb_offset = find_fpb_offset(prog);
+	ctx.tc_out_offset = -1;
 
 	/*
 	 * 1. Initial fake pass to compute ctx->idx and ctx->offset.
-- 
2.39.2

